# -*- coding: utf-8 -*-
"""MalariaDetection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10shXB8MOS6H_UYK3Iojk-vAuWvesRZBU
"""

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download iarunava/cell-images-for-detecting-malaria

import cv2
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPool2D, Flatten, Activation
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt
import glob
import os

img_dir = 'cell_images'
img_size = 70

def load_images(path):
  image_files = glob.glob(os.path.join(path, "Parasitized/*.png")) + \
                glob.glob(os.path.join(path, "Uninfected/*.png"))

  X, y = [], []

  for img_file in image_files:
    label = 0 if "Uninfected" in img_file else 1
    img_arr = cv2.imread(img_file, cv2.IMREAD_GRAYSCALE)

    img_resized = cv2.resize(img_arr, (img_size, img_size))
    X.append(img_resized)
    y.append(label)

  return X, y

(n_samples, 70, 70, 1)

X, y = load_images(img_dir)

X = np.array(X).reshape(-1, img_size, img_size, 1)

# We will normalize the image

X = X/255

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1, stratify=y)

print("Training data: " + str(X_train.shape))
print("Test data: " + str(X_test.shape))

y_train = np.array(y_train)
y_test = np.array(y_test)


print(y_train.shape)
print(y_test.shape)

model = Sequential()
model.add(Conv2D(64, (3,3), input_shape = X_train.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(64, (3,3), input_shape = X_train.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Conv2D(64, (3,3), input_shape = X_train.shape[1:]))
model.add(Activation("relu"))
model.add(MaxPool2D(pool_size=(2,2)))

model.add(Flatten())

model.add(Dense(64))
model.add(Activation("relu"))

model.add(Dense(64))
model.add(Activation("relu"))

model.add(Dense(1))
model.add(Activation("sigmoid"))

model.summary()

model.compile(loss = 'binary_crossentropy', optimizer='adam', metrics=['accuracy'])

model.fit(X_train, y_train, batch_size=64, epochs=3, validation_split=0.2)

loss, accuracy = model.evaluate(X_test, y_test)

print("The Accuracy is: " + str(accuracy))

pred = model.predict(X_test)

pred = pred > 0.5
pred [:5]

from sklearn.metrics import classification_report, confusion_matrix

print(classification_report(y_test, pred))
print()

print("Confusion Matrix")
print()
print(confusion_matrix(y_test, pred))